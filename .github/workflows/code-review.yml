name: Vogte Code Review
on:
  pull_request:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  code-review:
    runs-on: ubuntu-latest
    # Run if:
    # 1. PR is opened, OR
    # 2. Comment on PR contains trigger phrase
    if: |
      github.event_name == 'pull_request' ||
      (github.event.issue.pull_request && contains(github.event.comment.body, '/vogte-review'))
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Get PR details
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            let pr;
            if (context.eventName === 'pull_request') {
              pr = context.payload.pull_request;
            } else {
              // For issue_comment events, fetch PR details
              const response = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });
              pr = response.data;
            }
            return pr;

      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ fromJson(steps.pr.outputs.result).head.ref }}
          fetch-depth: 0

      - name: Fetch base branch
        run: git fetch origin ${{ fromJson(steps.pr.outputs.result).base.ref }}:${{ fromJson(steps.pr.outputs.result).base.ref }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.25"

      - name: Install vogte
        run: go install github.com/piqoni/vogte@latest

      - name: Run vogte review
        id: review
        run: |
          # Create PR description from PR details
          PR_DESCRIPTION="${{ fromJson(steps.pr.outputs.result).title }}
          ${{ fromJson(steps.pr.outputs.result).body }}"

          # Run vogte and capture output
          REVIEW_OUTPUT=$(vogte -review "$PR_DESCRIPTION" 2>&1 || echo "Review failed")

          # Save output for next step (handle multiline)
          echo "REVIEW_OUTPUT<<EOF" >> $GITHUB_OUTPUT
          echo "$REVIEW_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const reviewOutput = ${{ toJson(steps.review.outputs.REVIEW_OUTPUT) }};
            const commentBody = `## âˆ‡ Vogte Code Review
            ${reviewOutput}
            ---
            *This review was automatically generated by [vogte](https://github.com/piqoni/vogte)*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
